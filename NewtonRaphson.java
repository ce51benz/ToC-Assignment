import java.math.*;
import java.util.Scanner;

public class NewtonRaphson {
	public static final MathContext PRECISION = new MathContext(3000,RoundingMode.HALF_UP);
	public static final BigDecimal TWO = new BigDecimal(2);
	
	//This function use to find derivative value of x^3 - const
	public static BigDecimal findDerivative(BigDecimal x){
		return TWO.multiply(x,PRECISION);
	}
	
	//This function use to calculate truthly from function itself(x^3 - const)
	public static BigDecimal CalFunction(BigDecimal x,BigDecimal constant){
		return x.pow(2,PRECISION).subtract(constant,PRECISION);
	}
	//Check consecutive match string from left to right
	public static int consecutiveMatch(String str1,String str2){
		int count = 0,i = 0;
		while(i < str1.length()&& i < str2.length()){
			if(str1.charAt(i) != str2.charAt(i))
				break;
			i++;count++;
		}
		return count;
	}
	public static void main(String[] args){
	Scanner s = new Scanner(System.in);
	//Actual answer to compare
	//Reference:http://www.schwartz-omalley.com/~owen/people/owen/sqrt_3.html
	BigDecimal actual = new BigDecimal("1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232650153123432669033228866506722546689218379712270471316603678615880190499865373798593894676503475065760507566183481296061009476021871903250831458295239598329977898245082887144638329173472241639845878553976679580638183536661108431737808943783161020883055249016700235207111442886959909563657970871684980728994932964842830207864086039887386975375823173178313959929830078387028770539133695633121037072640192491067682311992883756411414220167427521023729942708310598984594759876642888977961478379583902288548529035760338528080643819723446610596897228728652641538226646984200211954841552784411812865345070351916500166892944154808460712771439997629268346295774383618951101271486387469765459824517885509753790138806649619119622229571105552429237231921977382625616314688420328537166829386496119170497388363954959381457576718533736331259108996554246248347871976052359977691923235702203053028403859154149710724295592067062025095201759631858727663599752836634310801506658537106473285386259222605822205104036802702975047987280794616581004170526819400190957334621759438936702493204226910343698124637201111852610842689102997203112021000635071763745824052038475551972799337976149061078949855442233260040188513036315611448868472815892881632451872650666453848775991625766428721112408420680167635171001029431807155151909616424609070394081292169035174929613640041396704310412536323270309225773279602923765977455370954691157421404242307819923276174019064245124548775168626961053336942162136053946042456541401285330078136334498567364067039773422298119610429255345016014059404795471545345484072717376562623665491666402330060132657440701078368584684523131604677544805004022406399119703622186029202388671507110171694002968687596635000408953162142334252279568340670134701859020283607167621477434934495635958080821304425864694685226109082633530087566126034606721954040559841289129759948100007720574402300476732588000915143714894754448791571912946590835708739615155377976402620683708480460729693827195856897597596261041591526575777907823349805678400229015320521389353737755365664270468268742899634413957436660737444455830864778932129853021481973953414781705166149525517632919936995657445226391125190935413869893668174309382264247369262020729909678311541319464843779154599159239282877146951492740264092136456540416445814902019457494193052690026139726460810650714396032060775105941877982847939861952499641652");
	BigDecimal wantedVal = new BigDecimal(3,PRECISION);
	
	//Initialized x = 10
	BigDecimal x = new BigDecimal(10,PRECISION);
	int match;
	
	//Display starter value.
	System.out.println("[Intialized]");
	System.out.println("x = "+x);
	System.out.println();
	
	//Loop for 20 rounds to test performance of this method
	for(int i = 0;i < 20;i++){
		
		//Xn+1 = Xn - (f(xn)/f'(xn))
		x = x.subtract(CalFunction(x,wantedVal).
		    divide(findDerivative(x),PRECISION),PRECISION);
		
		//Display result
		System.out.print("[ROUND ");
		System.out.print(i+1);
		System.out.println("]");
		System.out.print("MATCH = ");
		match = consecutiveMatch(actual.toPlainString(), x.toPlainString());
		if(match >= 0 && match <= 1)
			System.out.println(match);
		else
			System.out.println(match-1);
		System.out.println("x = "+x);
		s.nextLine();
	}
	
	System.out.println("The answer is:"+x);
	}
	}

